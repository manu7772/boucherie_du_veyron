<?php

namespace site\adminBundle\Entity;

// use site\adminBundle\Entity\subentityRepository;
use site\adminBundle\Entity\EntityBaseRepository;
// use Gedmo\Sortable\Entity\Repository\SortableRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;

/**
 * nestedpositionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class nestedpositionRepository extends EntityBaseRepository {

	const ELEMENT = 'element';

	// public function find($id) {
	// 	$qb = $this->createQueryBuilder(self::ELEMENT);
	// 	$qb->where(self::ELEMENT.'.id = :id')->setParameter('id', $id);
	// 	$this->addSelectNesteds($qb);
	// 	return $qb->getQuery()->getResult();
	// }

	// public function findAll() {
	// 	$qb = $this->createQueryBuilder(self::ELEMENT);
	// 	$this->addSelectNesteds($qb);
	// 	return $qb->getQuery()->getResult();
	// }

	public function existsJointure($parent, $child) {
		if(is_object($parent)) $parent = $parent->getId();
		if(is_object($child)) $child = $child->getId();
		$qb = $this->createQueryBuilder(self::ELEMENT);
		$qb->join(self::ELEMENT.'.parent', 'parent')
			->where('parent.id = :parentid')
			->setParameter('parentid', $parent)
			->join(self::ELEMENT.'.child', 'child')
			->andWhere('child.id = :childid')
			->setParameter('childid', $child)
			// ->select(self::ELEMENT.'.position')
			;
		$result = $qb->getQuery()->getScalarResult();
		return count($result) > 0;
	}

	public function addSelectNesteds(&$qb) {
		$qb->leftJoin(self::ELEMENT.'.nestedpositionParents', 'parents')->addSelect('parents')
			->leftJoin(self::ELEMENT.'.nestedpositionChilds', 'childs')->addSelect('childs')
			;
		return $qb;
	}

}
