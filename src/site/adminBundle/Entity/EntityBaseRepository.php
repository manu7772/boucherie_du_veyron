<?php

namespace site\adminBundle\Entity;

use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Symfony\Component\DependencyInjection\ContainerInterface;

use site\adminBundle\services\aetools;
use site\adminBundle\services\aeEntity;
use site\UserBundle\Entity\User;

use \DateTime;

/**
 * EntityBaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntityBaseRepository extends EntityRepository {

	const ELEMENT = 'element';

	protected $initCMD;
	protected $ClassMetadata;
	protected $fields;
	protected $entity_shortName;
	protected $entity_className;
	protected $em;
	// déclare context
	protected $context = false;
	protected $aeEntities = null;
	protected $user = null;
	protected $roles = null;
	protected $bundle = null;
	protected $environment = null;

	public function __construct(EntityManager $em, ClassMetadata $ClassMetadata) {
		$this->context = false;
		$this->aeEntities = null;
		$this->ClassMetadata = $ClassMetadata;
		parent::__construct($em, $this->ClassMetadata);
		$this->em = $em;
		$this->initCMD = false;
		$this->initCMData();
	}

	public function find($id, $shortCutContext = false) {
		$qb = $this->createQueryBuilder(self::ELEMENT);
		$qb->where(self::ELEMENT.'.id = :id')
			->setParameter('id', $id)
			;
		if($shortCutContext == false) $this->contextStatut($qb);
		return $qb->getQuery()->getOneOrNullresult();
	}

	public function findAll($shortCutContext = false) {
		$qb = $this->createQueryBuilder(self::ELEMENT);
		if($shortCutContext == false) $this->contextStatut($qb);
		return $qb->getQuery()->getResult();
	}


	/** Renvoie la(les) valeur(s) par défaut --> ATTENTION : dans un array()
	* @param $defaults = liste des éléments par défaut
	*/
	public function defaultVal() {
		return $this->defaultValAsClosure()->getQuery()->getResult();
	}



	/********************************/
	/*** CLOSURES                 ***/
	/********************************/

	public function defaultValAsClosure(aetools $aeEntities = null) {
		$qb = $this->findAllClosure($aeEntities);
		if(array_key_exists("default", $this->getFields())) {
			$qb->where(self::ELEMENT.'.default = :def')
				->setParameter('def', 1)
				;
		}
		// resultat
		return $qb;		
	}

	public function defaultValsListClosure(aetools $aeEntities = null, $data = null) {
		$qb = $this->findAllClosure($aeEntities);
		$whr = 'where';
		if(is_array($data)) foreach ($data as $classname) if(is_string($classname)) {
			$qb->$whr(self::ELEMENT.' INSTANCE OF site\adminBundle\Entity\\'.$classname);
			$whr = 'orWhere';
		}
		// echo('<p>Returns : <p>'.implode('</p><p>- ', $qb->getQuery()->getResult()).'</p></p>');
		// resultat
		return $qb;
	}

	public function findAllClosure(aetools $aeEntities = null) {
		$qb = $this->createQueryBuilder(self::ELEMENT);
		if($aeEntities != null) $this->declareContext($aeEntities);
		// echo('<p>test 1</p>');
		$this->contextStatut($qb);
		// echo('<p>test 2</p>');
		// resultat
		return $qb;
	}


	/**
	 * Détermine le niveau de séléction des éléments sensibles du site selon User / bundle / etc.
	 * @param aetools $aeEntities
	 * @return integer
	 */
	public function declareContext(aetools $aeEntities) {
		$this->context = true;
		$this->aeEntities = $aeEntities;
		// ROLE
		$this->user = $this->aeEntities->getUser();
		if(is_object($this->user)) {
			$this->roles = $this->user->getGrants();
		} else {
			$this->roles = array('IS_AUTHENTICATED_ANONYMOUSLY');
		}
		// BUNDLE
		$this->bundle = $this->aeEntities->getBundleName();
		// ENVIRONMENT
		$this->environment = $this->aeEntities->getEnv();

		// is_object($this->user) ? $user = $this->user.' = '.$this->user->getBestRole() : $user = "anon. = IS_AUTHENTICATED_ANONYMOUSLY" ;
		// echo('<h4 style="color:red;">Entité : '.$this->entity_shortName.'</h4>');
		// echo('<h4>- User = high role / roles : <span style="color:green;">'.$user.'</span> / '.implode(', ', $this->roles).'</h4>');
		// echo('<h4>- Bundlename : '.$this->bundle.'</h4>');
		return $this;
	}

	// public function compileForMode(QueryBuilder &$qb) {
	// 	// mode normal : suppression des éléments périmés, sadmin, etc.
	// 	switch ($this->adminMode) {
	// 		case 2: // + haut niveau d'accès
	// 			break;
	// 		case 1: // niveau ADMIN
	// 			$this->defaultStatut($qb, array("Actif", "Inactif", "Expired"));
	// 			// $this->excludeExpired($qb);
	// 			// $this->excludeNotPublished($qb);
	// 			break;
	// 		default: // niveau USER
	// 			$this->defaultStatut($qb);
	// 			$this->excludeExpired($qb);
	// 			$this->excludeNotPublished($qb);
	// 			break;
	// 	}
	// }

	/**
	 * Recherche des entités selon des valeurs/champ
	 * $type_related = '_self' pour désigner un champ interne
	 * @param array $data - array association of field => value
	 * @param boolean/string $returns = false (values = true/false/"querybuilder")
	 * @return mixed
	 */
	public function findWithField(array $data, $returns = false) {
		$returns == true ? $getMethod = 'getArrayResult' : $getMethod = 'getResult';
		if(isset($data['type_related']) && isset($data['type_field']) && isset($data['type_values'])) {
			// foreach ($data['type_values'] as $key => $value) {
			// 	$data['type_values'][$key] = $value.'%';
			// }
			$qb = $this->createQueryBuilder(self::ELEMENT);
			$whr = 'where';
			if($data['type_related'] == '_self') {
				// champ interne
				// $qb->where($qb->expr()->in(self::ELEMENT.'.'.$data['type_field'], $data['type_values']));
				foreach ($data['type_values'] as $typeValue) {
					if($typeValue !== 'null') {
						$qb->$whr($qb->expr()->orX($qb->expr()->like(self::ELEMENT.'.'.$data['type_field'], $qb->expr()->literal('%'.(string) $typeValue.'%'))));
						$whr = 'andWhere';
					} else {
						$qb->$whr(self::ELEMENT.'.'.$data['type_field'].' IS NULL');
						$whr = 'andWhere';
					}
				}
			} else {
				echo('related !!');
				$qb->join(self::ELEMENT.'.'.$data['type_related'], 'entity');
				foreach ($data['type_values'] as $typeValue) {
					if($typeValue !== 'null') {
						$qb->$whr($qb->expr()->orX($qb->expr()->like('entity.'.$data['type_field'], $qb->expr()->literal('%'.$typeValue.'%'))));
						$whr = 'andWhere';
					} else {
						$qb->$whr('entity.'.$data['type_field'].' IS NULL');
						$whr = 'andWhere';
					}
				}
			}
		} else throw new Exception("Missing parameters for Repository method \"findWithField\"", 1);
		// mode normal : suppression des éléments périmés, sadmin, etc.
		$this->contextStatut($qb);
		return $returns == "querybuilder" ? $qb : $qb->getQuery()->$getMethod();
	}


	// public function findByField($types, $self = '_self', $asArray = false) {
	// 	$asArray == true ? $getMethod = 'getArrayResult' : $getMethod = 'getResult';
	// 	$qb = $this->createQueryBuilder(self::ELEMENT);
	// 	if(count($types) == 2 || ((count($types) == 3) && ($types['type_related'] == $self))) {
	// 		// champ interne
	// 		$qb = $this->createQueryBuilder(self::ELEMENT)
	// 			->where($qb->expr()->in(self::ELEMENT.'.'.$types['type_field'], $types['type_values']));
	// 		$qb = $this->addJoins($qb, $this->getAdds());
	// 		return $qb->getQuery()->$getMethod();
	// 	} else if(count($types) == 3) {
	// 		// champ externe
	// 		$qb->join(self::ELEMENT.'.'.$types['type_related'], 'entity')
	// 			->where($qb->expr()->in('entity.'.$types['type_field'], $types['type_values']));
	// 		$qb = $this->addJoins($qb, $this->getAdds());
	// 		return $qb->getQuery()->$getMethod();
	// 	}
	// 	return array();
	// }

	/**
	 * initCMData
	 */
	private function initCMData() {
		if($this->initCMD === false) {
			$this->initCMD = true;
			// ajout champs single
			$fields = $this->ClassMetadata->getColumnNames();
			foreach($fields as $f) {
				$this->fields[$f]['nom'] = $f;
				$this->fields[$f]['type'] = 'single';
			}
			// ajout champs associated
			$assoc = $this->ClassMetadata->getAssociationMappings();
			foreach($assoc as $nom => $field) {
				$this->fields[$nom]['nom'] = $nom;
				$this->fields[$nom]['type'] = 'association';
			}
			$this->entity_shortName = $this->ClassMetadata->getReflectionClass()->getShortName();
			$this->entity_className = $this->ClassMetadata->getReflectionClass()->getNamespaceName();
		}
	}

	protected function getFields() {
		return $this->fields;
	}

	/**
	 * Alias existe ? On peut préciser dans $types les types de jointures ('join'…)
	 * @param QueryBuilder $qb
	 * @param string $alias
	 * @param string $types = array()
	 * @return boolean
	 */
	protected function aliasExists(QueryBuilder $qb, $alias, $types = []) {
		if(is_string($types)) $types = array($types);
		$aliasAlreadyExists = false;
		$DqlParts = $qb->getDQLParts();
		// echo('<pre>');
		// var_dump($DqlParts);
		foreach ($DqlParts as $type => $DqlPart) if(is_array($DqlPart) && (count($types) == 0 || in_array($type, $types))) {
			foreach ($DqlPart as $parts) {
				foreach ($parts as $part) {
					if($part->getAlias() === $alias) {
						// echo('<p>'.$alias.' = '.$part->getJoin().'</p>');
						$aliasAlreadyExists = true;
						break 3;
					}
				}
			}
		}
		// die('</pre>');
		return $aliasAlreadyExists;
	}

	/**
	 * defaultStatut
	 * Sélect element de statut = actif uniquement
	 * @param QueryBuilder &$qb
	 * @param array/string $statut = null
	 */
	protected function defaultStatut(QueryBuilder &$qb, $statut = null) {
		if(array_key_exists("statut", $this->getFields())) {
			if($statut === null) $statut = array("Actif");
			if(is_string($statut)) $statut = array($statut);
			$qb->join(self::ELEMENT.'.statut', 'statut')
				->andWhere($qb->expr()->in('statut.nom', $statut));
		}
		// return $qb;
	}

	/**
	 * contextStatut
	 * Sélect element de statut = actif uniquement
	 * @param QueryBuilder &$qb
	 * @param string $elem = '_default'
	 */
	protected function contextStatut(QueryBuilder &$qb, $elem = '_default') {
		if($this->context == true) {
			if($elem == '_default') $elem = self::ELEMENT;
			if(array_key_exists("statut", $this->getFields())) {
				// ROLES
				$qb->join($elem.'.statut', 'statut')
					->andWhere($qb->expr()->in('statut.niveau', $this->roles))
					->andWhere($qb->expr()->orX($qb->expr()->like('statut.bundles', $qb->expr()->literal('%'.$this->bundle.'%'))));
				;
			}
		}
		return $qb;
	}

	/**
	 * excludeExpired
	 * Sélect elements non expirés
	 * @param Doctrine\ORM\QueryBuilder $qb
	 * @return QueryBuilder
	 */
	protected function excludeExpired(QueryBuilder &$qb) {
		if(array_key_exists("dateExpiration", $this->getFields())) {
			$qb->andWhere(self::ELEMENT.'.dateExpiration > :date OR '.self::ELEMENT.'.dateExpiration is null')
				->setParameter('date', new DateTime());
		}
		// return $qb;
	}

	/**
	 * excludeNotPublished
	 * Sélect elements publiés
	 * @param Doctrine\ORM\QueryBuilder $qb
	 * @return QueryBuilder
	 */
	protected function excludeNotPublished(QueryBuilder &$qb) {
		if(array_key_exists("datePublication", $this->getFields())) {
			$qb->andWhere(self::ELEMENT.'.datePublication < :date OR '.self::ELEMENT.'.datePublication is null')
				->setParameter('date', new DateTime());
		}
		// return $qb;
	}


}
